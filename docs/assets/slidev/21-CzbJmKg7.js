import{_ as v}from"./VClick-Civ4Iyyj.js";import{_ as S}from"./VClicks-CJ2_WTYg.js";import{I as g}from"../default-Bh6R42zU.js";import{_ as x,av as m}from"../index-CnP4D8nb.js";import{p as d,u as p,f as b}from"./context-BxZCd88M.js";import{o as k,c as w,k as r,l as o,q as $,s as y,e,a9 as s}from"../modules/vue-DOp_BVzA.js";import"../BaseGrid-KFoWhDvH.js";import"../modules/shiki-DAFps8ir.js";const P={__name:"21",setup(f,{expose:l}){l(),d(m);const{$slidev:i,$nav:n,$clicksContext:_,$clicks:u,$page:a,$renderContext:t,$frontmatter:h}=p(),c={$slidev:i,$nav:n,$clicksContext:_,$clicks:u,$page:a,$renderContext:t,$frontmatter:h,InjectedLayout:g,get frontmatter(){return m},get useSlideContext(){return p},get _provideFrontmatter(){return d},get _frontmatterToProps(){return b}};return Object.defineProperty(c,"__isScriptSetup",{enumerable:!1,value:!0}),c}},C=e("h1",null,"How much did we gain?",-1),z=e("p",null,"Original parse time via acorn in JS: 180ms",-1),J=e("ul",null,[e("li",null,"Parse via SWC in Rust: 51ms"),e("li",null,"Serialize in Rust: 8ms"),e("li",null,"Deserialize in JavaScript: 47ms")],-1),T=e("p",null,[s("Total parse time including conversion: 108ms."),e("br"),s(" Serialize + deserialize 4 times faster than JSON.")],-1),I=e("h2",null,"What about multi-threading?",-1),N=e("ul",null,[e("li",null,"JavaScript workers are very slow to instantiate"),e("li",null,"However, POSIX threads in Rust are nearly free")],-1),O=e("p",null,[s("For non-WebAssembly, only the decode time is relevant"),e("br"),s(" â€”which can be eliminated if JS directly works on the buffer as well.")],-1);function R(f,l,i,n,_,u){const a=S,t=v;return k(),w(n.InjectedLayout,$(y(n._frontmatterToProps(n.frontmatter,20))),{default:r(()=>[C,z,o(a,null,{default:r(()=>[J]),_:1}),o(t,null,{default:r(()=>[T]),_:1}),o(t,null,{default:r(()=>[I]),_:1}),o(t,null,{default:r(()=>[N]),_:1}),o(t,null,{default:r(()=>[O]),_:1})]),_:1},16)}const A=x(P,[["render",R],["__file","/@slidev/slides/21.md"]]);export{A as default};
